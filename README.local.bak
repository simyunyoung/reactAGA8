# AGA8 Calculator Frontend

This is a React-based frontend for the AGA8 calculator. It interacts with a WebAssembly (WASM) module compiled from the NIST Rust AGA8 code. Inputs use the same engineering units as the original Rust program.

## Getting Started

1. Install dependencies:
   ```bash
   npm install
   ```
2. Start the development server:
   ```bash
   npm run dev
   ```

## WASM Integration

The frontend will load the WASM module and call exposed Rust functions for calculations.

## Project Structure
- React frontend: `/web`
- Rust AGA8 code: `/RUST`

## Next Steps
- Compile Rust code to WASM
- Integrate WASM with React
- Build input forms using engineering units

---

# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
